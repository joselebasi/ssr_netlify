---
---

<form id="orgForm" class="bg-white p-6 rounded-lg shadow-md mb-8">
  <div class="mb-4">
    <label for="organization" class="block text-gray-700 font-medium mb-2">GitHub Organization</label>
    <input
      type="text"
      id="organization"
      name="organization"
      placeholder="e.g., microsoft"
      class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
      required
    />
  </div>
  <button
    type="submit"
    class="bg-blue-600 text-white py-2 px-6 rounded-md hover:bg-blue-700 transition-colors"
  >
    Fetch Repositories
  </button>
</form>

<div id="results" class="bg-white p-6 rounded-lg shadow-md hidden">
  <h2 class="text-2xl font-bold mb-4">Repositories</h2>
  <div id="loading" class="text-center py-4 hidden">
    <p>Loading repositories...</p>
  </div>
  <div id="repos-container"></div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('orgForm') as HTMLFormElement;
    const resultsDiv = document.getElementById('results') as HTMLDivElement;
    const loadingDiv = document.getElementById('loading') as HTMLDivElement;
    const reposContainer = document.getElementById('repos-container') as HTMLDivElement;

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const organization = (document.getElementById('organization') as HTMLInputElement).value.trim();
      
      if (!organization) return;

      // Show loading state
      resultsDiv.classList.remove('hidden');
      loadingDiv.classList.remove('hidden');
      reposContainer.innerHTML = '';
      
      try {
        const response = await fetch('/api/services_repos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ organization }),
        });

        const data = await response.json();
        
        // Hide loading
        loadingDiv.classList.add('hidden');
        
        if (data.error) {
          reposContainer.innerHTML = `<p class="text-red-600">${data.error}</p>`;
          return;
        }
        
        if (data.repositories.length === 0) {
          reposContainer.innerHTML = '<p>No repositories found for this organization.</p>';
          return;
        }
        
        // Display repositories
        const reposList = document.createElement('ul');
        reposList.className = 'space-y-4';
        
        data.repositories.forEach((repo: any) => {
          const item = document.createElement('li');
          item.className = 'border-b pb-4';
          item.innerHTML = `
            <h3 class="text-xl font-semibold">
              <a href="${repo.html_url}" target="_blank" class="text-blue-600 hover:underline">${repo.name}</a>
            </h3>
            <p class="text-gray-700">${repo.description || 'No description available'}</p>
            <div class="flex items-center mt-2 text-sm text-gray-600">
              <span class="mr-4">‚≠ê ${repo.stargazers_count}</span>
              <span class="mr-4">üç¥ ${repo.forks_count}</span>
              <span>Updated: ${new Date(repo.updated_at).toLocaleDateString()}</span>
            </div>
          `;
          reposList.appendChild(item);
        });
        
        reposContainer.appendChild(reposList);
        
      } catch (error) {
        loadingDiv.classList.add('hidden');
        reposContainer.innerHTML = '<p class="text-red-600">An error occurred while fetching repositories.</p>';
        console.error('Error:', error);
      }
    });
  });
</script>